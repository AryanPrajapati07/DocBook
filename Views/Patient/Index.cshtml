@model List<DocBook.Models.Patient>

<div class="container-fluid py-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="text-primary mb-1">👥 Patients</h2>
            <p class="text-muted mb-0">@Model.Count() patients registered</p>
        </div>
        <a class="btn btn-primary btn-lg shadow-sm" href="/Patient/Create">
            ➕ Add Patient
        </a>
    </div>

    <!-- Search Bar -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="search-box">
                <input type="text" class="form-control form-control-lg" id="searchInput"
                       placeholder="🔍 Search patients by name or phone...">
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select form-select-lg" id="genderFilter">
                <option value="">All Genders</option>
                <option value="Male">👨 Male</option>
                <option value="Female">👩 Female</option>
            </select>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-secondary btn-lg w-100" onclick="clearSearch()">
                🗑️ Clear
            </button>
        </div>
    </div>

    <!-- Patients Grid -->
    <div class="row" id="patientsGrid">
        @foreach (var p in Model)
        {
            <div class="col-xl-4 col-lg-6 mb-4 patient-card"
                 data-name="@p.Name?.ToLower()"
                 data-contact="@p.Contact"
                 data-gender="@p.Gender">
                <div class="card patient-item h-100 shadow-sm">
                    <div class="card-body">
                        <!-- Patient Header -->
                        <div class="d-flex align-items-center mb-3">
                            <div class="patient-avatar">
                                @p.Name?.FirstOrDefault().ToString().ToUpper()
                            </div>
                            <div class="ms-3 flex-grow-1">
                                <h5 class="card-title mb-1">@p.Name</h5>
                                <span class="badge gender-badge-@p.Gender?.ToLower()">
                                    @(p.Gender == "Male" ? "👨" : "👩") @p.Gender
                                </span>
                            </div>
                            <div class="patient-id">
                                #@p.PatientId.ToString("D4")
                            </div>
                        </div>

                        <!-- Patient Info -->
                        <div class="patient-info">
                            <div class="info-item">
                                <span class="info-label">🎂 Age:</span>
                                <span class="info-value">@CalculateAge(p.DOB.Value) years</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">📞 Phone:</span>
                                <span class="info-value">@p.Contact</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">📍 Address:</span>
                                <span class="info-value text-truncate" title="@p.Address">@p.Address</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">📅 DOB:</span>
                                <span class="info-value">@p.DOB</span>
                            </div>
                        </div>
                    </div>

                    <!-- Actions -->
                    <div class="card-footer bg-transparent border-top-0 pt-0">
                        <div class="btn-group w-100" role="group">
                            <a class="btn btn-outline-primary btn-sm" href="/Patient/Edit/@p.PatientId" title="Edit">
                                ✏️ Edit
                            </a>
                            <a class="btn btn-outline-success btn-sm" href="/MedicalHistory/Index?patientId=@p.PatientId" title="View">
                                👁️ View
                            </a>
                            <button class="btn btn-outline-danger btn-sm" onclick="deletePatient(@p.PatientId, '@p.Name')" title="Delete">
                                🗑️ Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- No Results Message -->
    <div id="noResults" class="text-center py-5" style="display: none;">
        <div class="no-results-icon">😔</div>
        <h4 class="text-muted">No patients found</h4>
        <p class="text-muted">Try adjusting your search criteria</p>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-danger text-white border-0">
                <h5 class="modal-title">⚠️ Delete Patient</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center py-4">
                <div class="delete-icon">🗑️</div>
                <h5 id="deletePatientName" class="mb-3"></h5>
                <p class="text-muted">Are you sure you want to delete this patient? This action cannot be undone.</p>
                <dl class="row">
                   
                </dl>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>

        </div>
    </div>
</div>

<style>
    /* Main Styling */
    .patient-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 18px;
        text-shadow: 0 1px 3px rgba(0,0,0,0.3);
    }

    .patient-item {
        transition: all 0.3s ease;
        border: none;
        border-radius: 15px;
        overflow: hidden;
    }

        .patient-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.15) !important;
        }

    .patient-id {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: bold;
    }

    /* Gender Badges */
    .gender-badge-male {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
    }

    .gender-badge-female {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        border: none;
    }

    /* Patient Info */
    .patient-info {
        background: #f8f9fc;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 15px;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

        .info-item:last-child {
            margin-bottom: 0;
        }

    .info-label {
        font-weight: 500;
        color: #6c757d;
        font-size: 14px;
    }

    .info-value {
        font-weight: 600;
        color: #2d3748;
        font-size: 14px;
        max-width: 150px;
    }

    /* Search Box */
    .search-box {
        position: relative;
    }

        .search-box input {
            border-radius: 25px;
            border: 2px solid #e9ecef;
            padding-left: 20px;
            transition: all 0.3s ease;
        }

            .search-box input:focus {
                border-color: #667eea;
                box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            }

    /* Buttons */
    .btn {
        border-radius: 25px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

    /* Modal Styling */
    .modal-content {
        border-radius: 15px;
    }

    .delete-icon {
        font-size: 48px;
        margin-bottom: 15px;
    }

    .no-results-icon {
        font-size: 72px;
        margin-bottom: 20px;
    }

    /* Responsive */
     (max-width: 768px) {
        .patient-avatar

    {
        width: 40px;
        height: 40px;
        font-size: 16px;
    }

    .info-value {
        max-width: 120px;
    }

    }

    /* Animation */
    .patient-card {
        animation: fadeInUp 0.5s ease-out;
    }

     fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }</style>


<script>
    // Search and Filter Functions
    document.getElementById('searchInput').addEventListener('input', filterPatients);
    document.getElementById('genderFilter').addEventListener('change', filterPatients);

    function filterPatients() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const genderFilter = document.getElementById('genderFilter').value;
        const patientCards = document.querySelectorAll('.patient-card');
        let visibleCount = 0;

        patientCards.forEach(card => {
            const name = card.dataset.name || '';
            const contact = card.dataset.contact || '';
            const gender = card.dataset.gender || '';

            const matchesSearch = name.includes(searchTerm) || contact.includes(searchTerm);
            const matchesGender = !genderFilter || gender === genderFilter;

            if (matchesSearch && matchesGender) {
                card.style.display = 'block';
                visibleCount++;
            } else {
                card.style.display = 'none';
            }
        });

        // Show/hide no results message
        const noResults = document.getElementById('noResults');
        if (visibleCount === 0) {
            noResults.style.display = 'block';
        } else {
            noResults.style.display = 'none';
        }
    }

    function clearSearch() {
        document.getElementById('searchInput').value = '';
        document.getElementById('genderFilter').value = '';
        filterPatients();
    }

    // Delete Patient Function
    function deletePatient(patientId, patientName) {
        document.getElementById('deletePatientName').textContent = patientName;
        document.getElementById('confirmDeleteBtn').onclick = function() {
            window.location.href = '/Patient/Delete/' + patientId;
        };

        const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
        modal.show();
    }

    // Add some loading animation
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.patient-card');
        cards.forEach((card, index) => {
            card.style.animationDelay = (index * 0.1) + 's';
        });
    });
</script>

@functions {
    int CalculateAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;
        if (birthDate.Date > today.AddYears(-age)) age--;
        return age;
    }
}